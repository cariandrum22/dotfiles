#!/usr/bin/env bash

set -euo pipefail

readonly HADOLINT_IMAGE="hadolint/hadolint"

# Function to display script usage
usage() {
  cat <<EOF >&2
Usage: $(basename "$0") DOCKERFILE [HADOLINT_OPTIONS...]

Lints (statically analyzes) a Dockerfile.

Arguments:
  DOCKERFILE          Path to the Dockerfile to lint.
  HADOLINT_OPTIONS    Additional options to pass to the hadolint command.
                      Example: --ignore DL3000 --format json

Examples:
  $(basename "$0") ./MyDockerfile
  $(basename "$0") ./MyDockerfile --ignore DL3008 --ignore DL3018
  $(basename "$0") ./path/to/your/Dockerfile --format tty
EOF
  exit 1
}

main() {
  # Check if the docker command exists
  if ! command -v docker &> /dev/null; then
    echo "Error: docker command not found. Please ensure Docker is installed and in your PATH." >&2
    exit 127
  fi

  # Check for Dockerfile argument
  if [[ $# -eq 0 ]]; then
    echo "Error: No Dockerfile specified for linting." >&2
    usage
  fi

  # Assign the first argument to dockerfile and then shift
  # Using 'local' here as 'readonly' cannot be used before 'shift' if we want to re-assign after shift.
  local dockerfile="$1"
  shift

  # Check if the Dockerfile exists and is readable
  if [[ ! -f "$dockerfile" ]]; then
    echo "Error: Dockerfile '$dockerfile' not found." >&2
    exit 1
  fi
  if [[ ! -r "$dockerfile" ]]; then
    echo "Error: Dockerfile '$dockerfile_path' is not readable. Check permissions." >&2
    exit 1
  fi

  # Feedback to the user
  echo "Linting Dockerfile '$dockerfile' using '${HADOLINT_IMAGE}'..." >&2

  # Run hadolint via Docker
  # The exit code of 'docker run' will be the script's exit code (due to 'set -e')
  docker run \
    --rm \
    -i \
    "${HADOLINT_IMAGE}" \
    hadolint "$@" - < "$dockerfile" # Pass hadolint options with "$@" and read Dockerfile from stdin

  echo "Linting completed successfully." >&2
}

# --- Script Execution ---
# Call the main function, passing all script arguments
main "$@"
