name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  check-flake:
    name: Check flake
    runs-on: ubuntu-latest
    steps:
      - name: Free disk space
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true
          docker-images: true

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v14
        with:
          extra-conf: |
            experimental-features = nix-command flakes
            accept-flake-config = true

      - name: Setup Nix cache
        uses: DeterminateSystems/magic-nix-cache-action@v8

      - name: Check top-level flake
        run: nix flake check --impure

      - name: Check home-manager flake
        run: |
          cd config/home-manager
          nix flake check --impure

      - name: Check xmonad flake
        run: |
          cd xmonad
          nix flake check

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Free disk space
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true
          docker-images: true

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v14
        with:
          extra-conf: |
            experimental-features = nix-command flakes
            accept-flake-config = true

      - name: Setup Nix cache
        uses: DeterminateSystems/magic-nix-cache-action@v8

      - name: Run pre-commit hooks
        run: |
          nix develop --impure --command pre-commit run --all-files

  build-home-manager:
    name: Build Home Manager configurations
    strategy:
      matrix:
        include:
          - system: x86_64-linux
            os: ubuntu-latest
          - system: aarch64-darwin
            os: macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Free disk space (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          # Remove tools that are not needed
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true
          docker-images: true

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v14
        with:
          extra-conf: |
            experimental-features = nix-command flakes
            accept-flake-config = true

      - name: Setup Nix cache
        uses: DeterminateSystems/magic-nix-cache-action@v8

      - name: Build Home Manager configuration
        run: |
          cd config/home-manager
          nix build --impure .#homeConfigurations."user@${{ matrix.system }}".activationPackage

      - name: Cleanup Nix store
        if: always()
        run: |
          nix-collect-garbage -d
          df -h

  build-xmonad:
    name: Build XMonad
    runs-on: ubuntu-latest
    strategy:
      matrix:
        system: [x86_64-linux]
    steps:
      - name: Free disk space
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true
          docker-images: true

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v14
        with:
          extra-conf: |
            experimental-features = nix-command flakes
            accept-flake-config = true

      - name: Setup Nix cache
        uses: DeterminateSystems/magic-nix-cache-action@v8

      - name: Build XMonad
        run: |
          cd xmonad
          nix build .#packages.${{ matrix.system }}.default

  format-check:
    name: Check formatting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v14
        with:
          extra-conf: |
            experimental-features = nix-command flakes
            accept-flake-config = true

      - name: Setup Nix cache
        uses: DeterminateSystems/magic-nix-cache-action@v8

      - name: Check Nix formatting
        run: |
          find . -name "*.nix" -type f -print0 | \
            xargs -0 nix run .#formatter.x86_64-linux -- --check

      - name: Check other formatting
        run: |
          nix develop --impure --command prettier --check "**/*.{md,yml,yaml,json}" || true
